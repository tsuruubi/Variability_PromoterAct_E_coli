if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("flowCore")
library(flowcore)
library(flowCore)
library(flowCore)
library(viridis)
library(ggplot2)
library(GGally)
library(scales)
library(ggpubr)
library(grid)
library(gtable)
library(gridExtra)
library(dplyr)
library(matrixStats)
library(preprocessCore)
library(RColorBrewer)
library(openxlsx)
library(readxl)
library(ggsci)
library(cowplot)
library(corrplot)
library(Hmisc)
# https://stackoverflow.com/questions/59419647/hmisc-package-or-namespace-failed-to-load-no-package-called-latticeextra
library(corrplot)
library(tidyverse)
library(magrittr)
library(dendextend)
library(FactoMineR)
library(factoextra)
library(proxy)
library(rstatix)
# library(plot3D)
# library(clusterProfiler)
# library(pathview)
# library(org.EcK12.eg.db)
# library(rvest)
library(corrr)
# library(GOSemSim)
# library(rrvgo)
# library(qdapTools)
# library(AnnotationDbi)
# library(ggVennDiagram)
# library(rJava)
# library(venneuler)
# library(igraph)
# library(tidygraph)
library(stringdist)
library(ggtree)
library(ape)
library(colorspace)
library(Biostrings)
library(msa)#
library(seqinr)#
library(ggtreeExtra)#
library(tinytex)
library(tools)
library(stringr)
library(ggmsa)#
library(bios2mds)#
Sys.time()
qw <- function(...) {
sapply(match.call()[-1], deparse)
}
createEmptyDf = function( nrow, ncol, colnames = c() ){
data.frame( matrix( vector(), nrow, ncol, dimnames = list( c(), colnames ) ) )
}
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
pValue_sp_text=function(dtf){
pcor_sp<-cor.test(x=dtf[,1],y=dtf[,2],method="spearman")
rho_sp<-round(pcor_sp$estimate,digits = 2)
pv_sp<-ifelse(pcor_sp$p.value<0.05," P<0.05",paste(" P==",round(pcor_sp$p.value,digits = 1),sep = ""))
rhopvtxt_sp<-paste("list(italic(rho)==", rho_sp,", ",pv_sp,")")
return(rhopvtxt_sp)
}
pValue_pr_text=function(dtf){
pcor_pr<-cor.test(x=dtf[,1],y=dtf[,2],method="pearson")
r_pr<-round(pcor_pr$estimate,digits = 2)
pv_pr<-ifelse(pcor_pr$p.value<0.05," P<0.05",paste(" P==",round(pcor_pr$p.value,digits = 1),sep = ""))
rpvtxt_pr<-paste("list(italic(r)==", r_pr,", ",pv_pr,")")
return(rpvtxt_pr)
}
Sys.time()
my_fcs<-read.FCS("8peaks.fcs")
my_fcs<-read.FCS("8peak.fcs")
View(my_fcs)
my_df<-my_fcs@exprs
View(my_df)
my_df<-my_fcs@exprs %>% data.frame()
my_df<-my_fcs@exprs %>% tibble()
my_df<-my_fcs@exprs %>% data.frame()
my_df<-my_df %>% select(FSC.A,SSC.A,FITC.A,PE.A)
colnames(my_df)<-qw(FSC,SSC,FITC,PE)
write_csv(my_df,"8peak_test.csv",)
round(my_df,digits = 2)
my_df<-round(my_df,digits = 2)
write_csv(my_df,"8peak_test.csv",)
