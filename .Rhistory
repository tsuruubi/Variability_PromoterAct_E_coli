temp2$fitness<-(1-temp2$intrcpt)*temp2$expression+temp2$intrcpt
temp2$intrcpt<-factor(temp2$intrcpt,levels=intrcpt_nk)
g4<-ggline(temp2,x="expression",y="fitness",color="intrcpt",palette=my_colorpl_category,
numeric.x.axis = TRUE,plot_type="l",xlim=c(0,1),ylim=c(0,1),
xlab="Expression level [a.u.]", ylab="Fitness [a.u.]",legend="")+
scale_x_continuous(breaks = get_breaks(by = 0.2, from = 0),limits =  c(0, 1)) +
scale_y_continuous(breaks = get_breaks(by = 0.2, from = 0),limits =  c(0, 1))
g5<-ggline(dfrunmed_nk,x="expression",y="Runmed",color = "intrcpt",palette = my_colorpl_category,
numeric.x.axis = TRUE,plot_type="l",xlim=c(0,1),ylim=c(-0.4,0.4),
xlab="Expression level [a.u.]", ylab="Mutational Change [a.u.]",legend="")+
scale_x_continuous(breaks = get_breaks(by = 0.5, from = 0),limits =  c(0, 1)) +
scale_y_continuous(breaks = get_breaks(by = 0.2, from = -0.4),limits =  c(-0.4, 0.4))
g5<-ggpar(g5,font.xtickslab = c(18),font.ytickslab = c(18),font.x = c(18),font.y=c(18))
g5
g5e<-ggline(dfrunmed_nk,x="expression",y="Runmed",color = "intrcpt",palette = my_colorpl_category,
numeric.x.axis = TRUE,plot_type="l",xlim=c(0.4,0.8),ylim=c(-0.15,0.1),
xlab="Expression level [a.u.]", ylab="Mutational Change [a.u.]",legend="")+
scale_x_continuous(breaks = get_breaks(by = 0.2, from = 0.4),limits =  c(0.4, 0.8)) +
scale_y_continuous(breaks = get_breaks(by = 0.1, from = -0.2),limits =  c(-0.15, 0.1))
g5e<-ggpar(g5e,font.xtickslab = c(18),font.ytickslab = c(18),font.x = c(18),font.y=c(18))
g5e
temp2<-data.frame(expression=rep(c(0,1),length(intrcpt_nk)),intrcpt=rep(intrcpt_nk,each=2))
temp2$fitness<-(1-temp2$intrcpt)*temp2$expression+temp2$intrcpt
temp2$intrcpt<-factor(temp2$intrcpt,levels=intrcpt_nk)
g4<-ggline(temp2,x="expression",y="fitness",color="intrcpt",palette=my_colorpl_category,
numeric.x.axis = TRUE,plot_type="l",xlim=c(0,1),ylim=c(0,1),
xlab="Expression level [a.u.]", ylab="Fitness [a.u.]",legend="")+
scale_x_continuous(breaks = get_breaks(by = 0.2, from = 0),limits =  c(0, 1)) +
scale_y_continuous(breaks = get_breaks(by = 0.2, from = 0),limits =  c(0, 1))
g5<-ggline(dfrunmed_nk,x="expression",y="Runmed",color = "intrcpt",palette = my_colorpl_category,
numeric.x.axis = TRUE,plot_type="l",xlim=c(0,1),ylim=c(-0.4,0.4),
xlab="Expression level [a.u.]", ylab="Mutational Change [a.u.]",legend="")+
scale_x_continuous(breaks = get_breaks(by = 0.5, from = 0),limits =  c(0, 1)) +
scale_y_continuous(breaks = get_breaks(by = 0.2, from = -0.4),limits =  c(-0.4, 0.4))
g5<-ggpar(g5,font.xtickslab = c(18),font.ytickslab = c(18),font.x = c(18),font.y=c(18))
g5
g5e<-ggline(dfrunmed_nk,x="expression",y="Runmed",color = "intrcpt",palette = my_colorpl_category,
numeric.x.axis = TRUE,plot_type="l",xlim=c(0.4,0.8),ylim=c(-0.15,0.1),
xlab="Expression level [a.u.]", ylab="Mutational Change [a.u.]",legend="")+
scale_x_continuous(breaks = get_breaks(by = 0.2, from = 0.4),limits =  c(0.4, 0.8)) +
scale_y_continuous(breaks = get_breaks(by = 0.1, from = -0.2),limits =  c(-0.15, 0.1))
g5e<-ggpar(g5e,font.xtickslab = c(18),font.ytickslab = c(18),font.x = c(18),font.y=c(18))
g5e
# load expression landscape
my_df<-paste(getwd(),"RMF_output","Output","ExprsLandscape_NK.csv",sep = "/") %>%
read_csv()
my_ids<-unique(my_df$ID)
NK_exlandscape_list<-list()
for(i in 1:length(my_ids)){
NK_exlandscape_list[[i]]<-my_df[my_df$ID==i,]
}
temp1<-NK_exlandscape_list[[1]]
temp1$uphillratio<-uphill_ratio(temp1$shape)
g1<-ggscatter(temp1,x="hmdist",y="expression",color="uphillratio",alpha=0.5,size=2,
xlab="Hamming distance",ylab="Expression level [a.u]",legend="")+
scale_x_continuous(breaks = get_breaks(by = 2, from = 0),limits =  c(0, 10)) +
scale_y_continuous(breaks = get_breaks(by = 0.5, from = 0),limits =  c(0, 1)) +
scale_color_gradient2(low  = "#C26B51",mid  = "#DDCE47",high = "#529985",midpoint = 0.5,limits=c(0,1))
g1<-ggpar(g1,font.xtickslab = c(18),font.ytickslab = c(18),font.x = c(18),font.y=c(18))
# load fitness landscape
my_df<-paste(getwd(),"RMF_output","Output","FitnessLandscape_NK.csv",sep = "/") %>%
read_csv()
NK_landscape_list<-list()
k<-1
for(i in 1:length(my_ids)){
for(j in 1:length(intrcpt_nk)){
NK_landscape_list[[k]]<-my_df[(my_df$ID==i)&(my_df$intercept==intrcpt_nk[j]),]
k<-k+1
}
}
temp3<-NK_landscape_list[[1]]
temp3$uphillratio<-uphill_ratio(temp3$shape)
g2<-ggscatter(temp3,x="hmdist",y="fitness",color="uphillratio",alpha=0.5,size=2,ylim=c(0,1),
xlab="Hamming distance",ylab="Fitness [a.u]",legend="")+
geom_hline(yintercept = intrcpt[1],color="red")+
scale_x_continuous(breaks = get_breaks(by = 2, from = 0),limits =  c(0, 10)) +
scale_y_continuous(breaks = get_breaks(by = 0.2, from = 0),limits =  c(0, 1)) +
scale_color_gradient2(low  = "#C26B51",mid  = "#DDCE47",high = "#529985",midpoint = 0.5,limits=c(0,1))
g2<-ggpar(g2,font.xtickslab = c(18),font.ytickslab = c(18),font.x = c(18),font.y=c(18))
g3<-ggscatter(temp1,x="expression",y="muteffect",color="uphillratio",alpha=0.5,size=2,
xlab="Expression level [a.u.]",ylab="Mutational Change [a.u.]",legend="",xlim=c(0,1),ylim=c(-0.4,0.4))+
scale_x_continuous(breaks = get_breaks(by = 0.5, from = 0),limits =  c(0, 1)) +
scale_color_gradient2(low  = "#C26B51",mid  = "#DDCE47",high = "#529985",midpoint = 0.5,limits=c(0,1))
g3<-ggpar(g3,font.xtickslab = c(18),font.ytickslab = c(18),font.x = c(18),font.y=c(18))
grid.arrange(g1,g3,g2, nrow = 1)
p_led<-ggscatter(temp1,x="expression",y="muteffect",color="uphillratio",alpha=0.5,size=2,
xlab="Expression level [a.u.]",ylab="Mutational Change [a.u.]",
legend="right",legend.title="",xlim=c(0,1),ylim=c(-0.4,0.4))+
scale_x_continuous(breaks = get_breaks(by = 0.5, from = 0),limits =  c(0, 1)) +
scale_color_gradient2(low  = "#C26B51",mid  = "#DDCE47",high = "#529985",midpoint = 0.5,limits=c(0,1),breaks=c(0,0.5,1))
q<-ggpar(p_led,font.legend = 16)
leg <- get_legend(q)
as_ggplot(leg)
# load expression landscape
my_df<-paste(getwd(),"RMF_output","Output","ExprsLandscape_NK.csv",sep = "/") %>%
read_csv()
my_ids<-unique(my_df$ID)
NK_exlandscape_list<-list()
for(i in 1:length(my_ids)){
NK_exlandscape_list[[i]]<-my_df[my_df$ID==i,]
}
temp1<-NK_exlandscape_list[[1]]
temp1$uphillratio<-uphill_ratio(temp1$shape)
g1<-ggscatter(temp1,x="hmdist",y="expression",color="uphillratio",alpha=0.5,size=2,
xlab="Hamming distance",ylab="Expression level [a.u]",legend="")+
scale_x_continuous(breaks = get_breaks(by = 2, from = 0),limits =  c(0, 10)) +
scale_y_continuous(breaks = get_breaks(by = 0.5, from = 0),limits =  c(0, 1)) +
scale_color_gradient2(low  = "#C26B51",mid  = "#DDCE47",high = "#529985",midpoint = 0.5,limits=c(0,1))
g1<-ggpar(g1,font.xtickslab = c(18),font.ytickslab = c(18),font.x = c(18),font.y=c(18))
# load fitness landscape
my_df<-paste(getwd(),"RMF_output","Output","FitnessLandscape_NK.csv",sep = "/") %>%
read_csv()
NK_landscape_list<-list()
k<-1
for(i in 1:length(my_ids)){
for(j in 1:length(intrcpt_nk)){
NK_landscape_list[[k]]<-my_df[(my_df$ID==i)&(my_df$intercept==intrcpt_nk[j]),]
k<-k+1
}
}
temp3<-NK_landscape_list[[1]]
temp3$uphillratio<-uphill_ratio(temp3$shape)
g2<-ggscatter(temp3,x="hmdist",y="fitness",color="uphillratio",alpha=0.5,size=2,ylim=c(0,1),
xlab="Hamming distance",ylab="Fitness [a.u]",legend="")+
geom_hline(yintercept = intrcpt[1],color="red")+
scale_x_continuous(breaks = get_breaks(by = 2, from = 0),limits =  c(0, 10)) +
scale_y_continuous(breaks = get_breaks(by = 0.2, from = 0),limits =  c(0, 1)) +
scale_color_gradient2(low  = "#C26B51",mid  = "#DDCE47",high = "#529985",midpoint = 0.5,limits=c(0,1))
g2<-ggpar(g2,font.xtickslab = c(18),font.ytickslab = c(18),font.x = c(18),font.y=c(18))
g3<-ggscatter(temp1,x="expression",y="muteffect",color="uphillratio",alpha=0.5,size=2,
xlab="Expression level [a.u.]",ylab="Mutational Change [a.u.]",legend="",xlim=c(0,1),ylim=c(-0.4,0.4))+
scale_x_continuous(breaks = get_breaks(by = 0.5, from = 0),limits =  c(0, 1)) +
scale_color_gradient2(low  = "#C26B51",mid  = "#DDCE47",high = "#529985",midpoint = 0.5,limits=c(0,1))
g3<-ggpar(g3,font.xtickslab = c(18),font.ytickslab = c(18),font.x = c(18),font.y=c(18))
grid.arrange(g1,g3,g2, nrow = 1)
p_led<-ggscatter(temp1,x="expression",y="muteffect",color="uphillratio",alpha=0.5,size=2,
xlab="Expression level [a.u.]",ylab="Mutational Change [a.u.]",
legend="right",legend.title="",xlim=c(0,1),ylim=c(-0.4,0.4))+
scale_x_continuous(breaks = get_breaks(by = 0.5, from = 0),limits =  c(0, 1)) +
scale_color_gradient2(low  = "#C26B51",mid  = "#DDCE47",high = "#529985",midpoint = 0.5,limits=c(0,1),breaks=c(0,0.5,1))
q<-ggpar(p_led,font.legend = 16)
leg <- get_legend(q)
as_ggplot(leg)
library(ggplot2)
library(scales)
library(ggpubr)
library(gridExtra)
library(dplyr)
library(matrixStats)
library(RColorBrewer)
library(openxlsx)
library(readxl)
library(ggsci)
library(tidyverse)
library(magrittr)
library(rstatix)
library(stringr)
Sys.time()
qw <- function(...) {
sapply(match.call()[-1], deparse)
}
createEmptyDf = function( nrow, ncol, colnames = c() ){
data.frame( matrix( vector(), nrow, ncol, dimnames = list( c(), colnames ) ) )
}
Sys.time()
my_fontsize<-16
Sys.time()
dmeta<-paste(getwd(),"Meta","metadata.xlsx",sep="/") %>%
read_xlsx()
my_volume<-"/Volumes/DailyUse"
my_path<-paste(my_volume,"Hatanaka","FlowData","CSV","MG1655.csv",sep="/")
autofl<-my_path %>% read_csv()
autofl$log10FSCpls3<-log10(autofl$FSC+1000)
# fscmode<-as.numeric(names(which.max(table(autofl$log10FSCpls3))))
hist_info <- hist(autofl$log10FSCpls3,plot=F,breaks = seq(2.5,5.5,0.01))               # Extract histogram information
# Calc. mode of FSC
fscmode<-hist_info$breaks[which(hist_info$density==max(hist_info$densit))]
paste("Mode of FSC:",fscmode) %>%
print()
# upper and lower limit of FSC gate
fsc_low<-3.675
fsc_high<-3.864
round(nrow(autofl[(autofl$log10FSCpls3>fsc_low)&(autofl$log10FSCpls3<fsc_high),])/nrow(autofl)*100) %>%
paste(.,"% of cells remains",sep="") %>%
print()
p1<-gghistogram(autofl,x="log10FSCpls3",y="density",fill="gray10",size=0,bins=50)+
xlab(expression(log[10]~"FSC [a.u.]"))+
ylab("Relative frequency [a.u.]")+
scale_x_continuous(breaks = get_breaks(by = 1, from = 3),limits =  c(2.7, 5.5))+
scale_y_continuous(breaks = get_breaks(by = 1, from = 0),limits =  c(0, 2.5))+
geom_vline(xintercept = fscmode,size=0.2,linetype=2)+
geom_vline(xintercept = c(fsc_low,fsc_high),size=0.2,linetype=2,color=get_palette("lancet",2)[2])
p1<-ggpar(p1,font.y=my_fontsize,font.x=my_fontsize,font.xtickslab = my_fontsize,font.ytickslab = my_fontsize)
p1
# Define autofluorescence
autofl.th<-quantile(autofl[(autofl$log10FSCpls3>fsc_low)&(autofl$log10FSCpls3<fsc_high),]$FITC,0.995)
p2<-gghistogram(autofl,x="FITC",y="density",fill = "gray10", size=0,bins=50,
xlab="Green FI [a.u.]",
ylab="Relative frequency [a.u.]")+
scale_x_continuous(breaks = get_breaks(by = 500, from = 0),limits =  c(-300, 1100))+
scale_y_continuous(breaks = get_breaks(by = 0.002, from = 0),limits =  c(0, 0.0045))+
geom_vline(xintercept = autofl.th,size=0.2,linetype=2,color=get_palette("lancet",2)[2])
p2<-ggpar(p2,font.y=my_fontsize,font.x=my_fontsize,font.xtickslab = my_fontsize,font.ytickslab = my_fontsize)
p2
rm(autofl)
Sys.time()
my_tmp<-dmeta[(!is.na(dmeta$Used))&(!is.na(dmeta$Genotype))&(!is.na(dmeta$Type)),]
mylist<-unique(my_tmp[(my_tmp$Used=="Yes")&(my_tmp$Genotype=="wild type")&(my_tmp$Type=="Promoter"),]$Promoter_Name)
my_df<-data.frame(Promoter_Name=mylist,WT_exprs=NA,MT_exprs=NA,
WT_sd=NA,MT_sd=NA,
logFC=NA,WT_NbCells=NA,MT_NbCells=NA)
figlist<-list()
for(i in 1:length(mylist)){
ddw<-dmeta[(dmeta$Promoter_Name %in% mylist[i])&(dmeta$Genotype=="wild type"),]$CSV_filename_new
ddm<-dmeta[(dmeta$Promoter_Name %in% mylist[i])&(dmeta$Genotype=="mutant library"),]$CSV_filename_new
dw<-paste(my_volume,"Hatanaka","FlowData","CSV",ddw,sep="/") %>%
read_csv()
dw$Name<-"WT"
dm<-paste(my_volume,"Hatanaka","FlowData","CSV",ddm,sep="/") %>%
read_csv()
dm$Name<-"Mut"
dwm<-bind_rows(dm,dw)
dwm<-dwm[dwm$FSC>-999,]
dwm$log10FSCpls3<-log10(dwm$FSC+1000)
dwm$FITCsbt<-dwm$FITC-autofl.th
dwm$log10FITCnorm<-ifelse(dwm$FITCsbt>0,log10(dwm$FITCsbt),NA)
dwm<-dwm[!is.na(dwm$log10FITCnorm),]
dwm<-dwm[(dwm$log10FSCpls3>fsc_low)&(dwm$log10FSCpls3<fsc_high)&(dwm$PE<1000),]
dwm$Name<-factor(dwm$Name,levels=qw(WT,Mut))
my_df$WT_exprs[i]<-mean(dwm[dwm$Name=="WT",]$log10FITCnorm)
my_df$MT_exprs[i]<-mean(dwm[dwm$Name=="Mut",]$log10FITCnorm)
my_df$WT_sd[i]<-sd(dwm[dwm$Name=="WT",]$log10FITCnorm)
my_df$MT_sd[i]<-sd(dwm[dwm$Name=="Mut",]$log10FITCnorm)
my_df$logFC[i]<-my_df$MT_exprs[i]-my_df$WT_exprs[i]
my_df$WT_NbCells[i]<-nrow(dwm[dwm$Name=="WT",])
my_df$MT_NbCells[i]<-nrow(dwm[dwm$Name=="Mut",])
g<-gghistogram(dwm,x="log10FITCnorm",y="density", size=0,bins=50,alpha=0.4,
legend="",legend.title="",
# add="mean", add.params = list(size=0.5,linetype=5),
color="Name",fill="Name",palette = c("#00AFBB","#D870AD"),
xlab="",ylab="",subtitle=mylist[i]
# xlab=expression(log[10]~"Green FI [a.u.]"),
# ylab="Relative frequency [a.u.]"
)+
# annotate("text",x=-Inf,y=Inf,label= mylist[i],hjust = -0.2,vjust = 1,size=5)+
scale_x_continuous(breaks = get_breaks(by = 1, from = 0),limits =  c(0, 6))+
scale_y_continuous(breaks = get_breaks(by = 1, from = 0),limits =  c(0, 4))
g<-ggpar(g,font.tickslab =c(15),font.subtitle = c(20))
figlist[[i]]<-g
}
rm(dw,dm,dwm,g)
# k<-1
# for(l in 1:8){
#   if(l<=7){
#     grid.arrange(figlist[[k+1]],figlist[[k+2]],figlist[[k+3]],figlist[[k+4]],figlist[[k+5]],figlist[[k+6]],figlist[[k+7]],figlist[[k+8]],figlist[[k+9]],figlist[[k+10]],nrow=1)
#     k<-k+10
#   }else{
#     grid.arrange(figlist[[1]],figlist[[2]],ncol=10)
#   }
# }
k<-0
for(l in 1:9){
grid.arrange(figlist[[k+1]],figlist[[k+2]],figlist[[k+3]],figlist[[k+4]],figlist[[k+5]],figlist[[k+6]],figlist[[k+7]],figlist[[k+8]],nrow=1)
k<-k+8
}
rm(figlist)
Sys.time()
my_tmp<-dmeta[(!is.na(dmeta$Used))&(!is.na(dmeta$Genotype))&(!is.na(dmeta$Type)),]
mylist<-unique(my_tmp[(my_tmp$Used=="Yes")&(my_tmp$Genotype=="wild type")&(my_tmp$Type=="Promoter"),]$Promoter_Name)
my_df<-data.frame(Promoter_Name=mylist,WT_exprs=NA,MT_exprs=NA,
WT_sd=NA,MT_sd=NA,
logFC=NA,WT_NbCells=NA,MT_NbCells=NA)
figlist<-list()
for(i in 1:length(mylist)){
ddw<-dmeta[(dmeta$Promoter_Name %in% mylist[i])&(dmeta$Genotype=="wild type"),]$CSV_filename_new
ddm<-dmeta[(dmeta$Promoter_Name %in% mylist[i])&(dmeta$Genotype=="mutant library"),]$CSV_filename_new
dw<-paste(my_volume,"Hatanaka","FlowData","CSV",ddw,sep="/") %>%
read_csv()
dw$Name<-"WT"
dm<-paste(my_volume,"Hatanaka","FlowData","CSV",ddm,sep="/") %>%
read_csv()
dm$Name<-"Mut"
dwm<-bind_rows(dm,dw)
dwm<-dwm[dwm$FSC>-999,]
dwm$log10FSCpls3<-log10(dwm$FSC+1000)
dwm$FITCsbt<-dwm$FITC-autofl.th
dwm$log10FITCnorm<-ifelse(dwm$FITCsbt>0,log10(dwm$FITCsbt),NA)
dwm<-dwm[!is.na(dwm$log10FITCnorm),]
dwm<-dwm[(dwm$log10FSCpls3>fsc_low)&(dwm$log10FSCpls3<fsc_high)&(dwm$PE<1000),]
dwm$Name<-factor(dwm$Name,levels=qw(WT,Mut))
my_df$WT_exprs[i]<-mean(dwm[dwm$Name=="WT",]$log10FITCnorm)
my_df$MT_exprs[i]<-mean(dwm[dwm$Name=="Mut",]$log10FITCnorm)
my_df$WT_sd[i]<-sd(dwm[dwm$Name=="WT",]$log10FITCnorm)
my_df$MT_sd[i]<-sd(dwm[dwm$Name=="Mut",]$log10FITCnorm)
my_df$logFC[i]<-my_df$MT_exprs[i]-my_df$WT_exprs[i]
my_df$WT_NbCells[i]<-nrow(dwm[dwm$Name=="WT",])
my_df$MT_NbCells[i]<-nrow(dwm[dwm$Name=="Mut",])
g<-gghistogram(dwm,x="log10FITCnorm",y="density", size=0,bins=50,alpha=0.4,
legend="",legend.title="",
# add="mean", add.params = list(size=0.5,linetype=5),
color="Name",fill="Name",palette = c("#00AFBB","#D870AD"),
xlab="",ylab="",subtitle=mylist[i]
# xlab=expression(log[10]~"Green FI [a.u.]"),
# ylab="Relative frequency [a.u.]"
)+
# annotate("text",x=-Inf,y=Inf,label= mylist[i],hjust = -0.2,vjust = 1,size=5)+
scale_x_continuous(breaks = get_breaks(by = 1, from = 1),limits =  c(1, 5))+
scale_y_continuous(breaks = get_breaks(by = 1, from = 0),limits =  c(0, 4))
g<-ggpar(g,font.tickslab =c(15),font.subtitle = c(20))
figlist[[i]]<-g
}
rm(dw,dm,dwm,g)
# k<-1
# for(l in 1:8){
#   if(l<=7){
#     grid.arrange(figlist[[k+1]],figlist[[k+2]],figlist[[k+3]],figlist[[k+4]],figlist[[k+5]],figlist[[k+6]],figlist[[k+7]],figlist[[k+8]],figlist[[k+9]],figlist[[k+10]],nrow=1)
#     k<-k+10
#   }else{
#     grid.arrange(figlist[[1]],figlist[[2]],ncol=10)
#   }
# }
k<-0
for(l in 1:9){
grid.arrange(figlist[[k+1]],figlist[[k+2]],figlist[[k+3]],figlist[[k+4]],figlist[[k+5]],figlist[[k+6]],figlist[[k+7]],figlist[[k+8]],nrow=1)
k<-k+8
}
rm(figlist)
Sys.time()
my_tmp<-dmeta[(!is.na(dmeta$Used))&(!is.na(dmeta$Genotype))&(!is.na(dmeta$Type)),]
mylist<-unique(my_tmp[(my_tmp$Used=="Yes")&(my_tmp$Genotype=="wild type")&(my_tmp$Type=="Promoter"),]$Promoter_Name)
my_df<-data.frame(Promoter_Name=mylist,WT_exprs=NA,MT_exprs=NA,
WT_sd=NA,MT_sd=NA,
logFC=NA,WT_NbCells=NA,MT_NbCells=NA)
figlist<-list()
for(i in 1:length(mylist)){
ddw<-dmeta[(dmeta$Promoter_Name %in% mylist[i])&(dmeta$Genotype=="wild type"),]$CSV_filename_new
ddm<-dmeta[(dmeta$Promoter_Name %in% mylist[i])&(dmeta$Genotype=="mutant library"),]$CSV_filename_new
dw<-paste(my_volume,"Hatanaka","FlowData","CSV",ddw,sep="/") %>%
read_csv()
dw$Name<-"WT"
dm<-paste(my_volume,"Hatanaka","FlowData","CSV",ddm,sep="/") %>%
read_csv()
dm$Name<-"Mut"
dwm<-bind_rows(dm,dw)
dwm<-dwm[dwm$FSC>-999,]
dwm$log10FSCpls3<-log10(dwm$FSC+1000)
dwm$FITCsbt<-dwm$FITC-autofl.th
dwm$log10FITCnorm<-ifelse(dwm$FITCsbt>0,log10(dwm$FITCsbt),NA)
dwm<-dwm[!is.na(dwm$log10FITCnorm),]
dwm<-dwm[(dwm$log10FSCpls3>fsc_low)&(dwm$log10FSCpls3<fsc_high)&(dwm$PE<1000),]
dwm$Name<-factor(dwm$Name,levels=qw(WT,Mut))
my_df$WT_exprs[i]<-mean(dwm[dwm$Name=="WT",]$log10FITCnorm)
my_df$MT_exprs[i]<-mean(dwm[dwm$Name=="Mut",]$log10FITCnorm)
my_df$WT_sd[i]<-sd(dwm[dwm$Name=="WT",]$log10FITCnorm)
my_df$MT_sd[i]<-sd(dwm[dwm$Name=="Mut",]$log10FITCnorm)
my_df$logFC[i]<-my_df$MT_exprs[i]-my_df$WT_exprs[i]
my_df$WT_NbCells[i]<-nrow(dwm[dwm$Name=="WT",])
my_df$MT_NbCells[i]<-nrow(dwm[dwm$Name=="Mut",])
g<-gghistogram(dwm,x="log10FITCnorm",y="density", size=0,bins=50,alpha=0.4,
legend="",legend.title="",
# add="mean", add.params = list(size=0.5,linetype=5),
color="Name",fill="Name",palette = c("#00AFBB","#D870AD"),
xlab="",ylab="",subtitle=mylist[i]
# xlab=expression(log[10]~"Green FI [a.u.]"),
# ylab="Relative frequency [a.u.]"
)+
# annotate("text",x=-Inf,y=Inf,label= mylist[i],hjust = -0.2,vjust = 1,size=5)+
scale_x_continuous(breaks = get_breaks(by = 1, from = 1),limits =  c(1, 5))+
scale_y_continuous(breaks = get_breaks(by = 1, from = 0))
g<-ggpar(g,font.tickslab =c(15),font.subtitle = c(20))
figlist[[i]]<-g
}
rm(dw,dm,dwm,g)
# k<-1
# for(l in 1:8){
#   if(l<=7){
#     grid.arrange(figlist[[k+1]],figlist[[k+2]],figlist[[k+3]],figlist[[k+4]],figlist[[k+5]],figlist[[k+6]],figlist[[k+7]],figlist[[k+8]],figlist[[k+9]],figlist[[k+10]],nrow=1)
#     k<-k+10
#   }else{
#     grid.arrange(figlist[[1]],figlist[[2]],ncol=10)
#   }
# }
k<-0
for(l in 1:9){
grid.arrange(figlist[[k+1]],figlist[[k+2]],figlist[[k+3]],figlist[[k+4]],figlist[[k+5]],figlist[[k+6]],figlist[[k+7]],figlist[[k+8]],nrow=1)
k<-k+8
}
rm(figlist)
Sys.time()
my_tmp<-dmeta[(!is.na(dmeta$Used))&(!is.na(dmeta$Genotype))&(!is.na(dmeta$Type)),]
mylist<-unique(my_tmp[(my_tmp$Used=="Yes")&(my_tmp$Genotype=="wild type")&(my_tmp$Type=="Promoter"),]$Promoter_Name)
my_df<-data.frame(Promoter_Name=mylist,WT_exprs=NA,MT_exprs=NA,
WT_sd=NA,MT_sd=NA,
logFC=NA,WT_NbCells=NA,MT_NbCells=NA)
i<-1
ddw<-dmeta[(dmeta$Promoter_Name %in% mylist[i])&(dmeta$Genotype=="wild type"),]$CSV_filename_new
ddm<-dmeta[(dmeta$Promoter_Name %in% mylist[i])&(dmeta$Genotype=="mutant library"),]$CSV_filename_new
dw<-paste(my_volume,"Hatanaka","FlowData","CSV",ddw,sep="/") %>%
read_csv()
dw$Name<-"WT"
dm<-paste(my_volume,"Hatanaka","FlowData","CSV",ddm,sep="/") %>%
read_csv()
dm$Name<-"Mut"
dwm<-bind_rows(dm,dw)
dwm<-dwm[dwm$FSC>-999,]
dwm$log10FSCpls3<-log10(dwm$FSC+1000)
dwm$FITCsbt<-dwm$FITC-autofl.th
dwm$log10FITCnorm<-ifelse(dwm$FITCsbt>0,log10(dwm$FITCsbt),NA)
dwm<-dwm[!is.na(dwm$log10FITCnorm),]
dwm<-dwm[(dwm$log10FSCpls3>fsc_low)&(dwm$log10FSCpls3<fsc_high)&(dwm$PE<1000),]
dwm$Name<-factor(dwm$Name,levels=qw(WT,Mut))
my_df$WT_exprs[i]<-mean(dwm[dwm$Name=="WT",]$log10FITCnorm)
my_df$MT_exprs[i]<-mean(dwm[dwm$Name=="Mut",]$log10FITCnorm)
my_df$WT_sd[i]<-sd(dwm[dwm$Name=="WT",]$log10FITCnorm)
my_df$MT_sd[i]<-sd(dwm[dwm$Name=="Mut",]$log10FITCnorm)
my_df$logFC[i]<-my_df$MT_exprs[i]-my_df$WT_exprs[i]
my_df$WT_NbCells[i]<-nrow(dwm[dwm$Name=="WT",])
my_df$MT_NbCells[i]<-nrow(dwm[dwm$Name=="Mut",])
View(dwm)
g<-gghistogram(dwm,x="log10FITCnorm",y="density", size=0,bins=50,alpha=0.4,
legend="",legend.title="",
# add="mean", add.params = list(size=0.5,linetype=5),
color="Name",fill="Name",palette = c("#00AFBB","#D870AD"),
xlab="",ylab="",subtitle=mylist[i]
# xlab=expression(log[10]~"Green FI [a.u.]"),
# ylab="Relative frequency [a.u.]"
)+
# annotate("text",x=-Inf,y=Inf,label= mylist[i],hjust = -0.2,vjust = 1,size=5)+
scale_x_continuous(breaks = get_breaks(by = 1, from = 1),limits =  c(1, 5))+
scale_y_continuous(breaks = get_breaks(by = 1, from = 0))
g<-ggpar(g,font.tickslab =c(15),font.subtitle = c(20))
g
ggplot_build(g)
my_gb<-ggplot_build(g)
my_gb$data
my_gb$data$density
my_gb$data
my_gb$data[[1]]
my_gb$data[[1]]$density
g
my_gb$data[[1]]$density
max(my_gb$data[[1]]$density)
my_gb<-ggplot_build(g)
g
my_tmp<-dmeta[(!is.na(dmeta$Used))&(!is.na(dmeta$Genotype))&(!is.na(dmeta$Type)),]
mylist<-unique(my_tmp[(my_tmp$Used=="Yes")&(my_tmp$Genotype=="wild type")&(my_tmp$Type=="Promoter"),]$Promoter_Name)
my_df<-data.frame(Promoter_Name=mylist,WT_exprs=NA,MT_exprs=NA,
WT_sd=NA,MT_sd=NA,
logFC=NA,WT_NbCells=NA,MT_NbCells=NA)
figlist<-list()
i<-1
for(i in 1:length(mylist)){
ddw<-dmeta[(dmeta$Promoter_Name %in% mylist[i])&(dmeta$Genotype=="wild type"),]$CSV_filename_new
ddm<-dmeta[(dmeta$Promoter_Name %in% mylist[i])&(dmeta$Genotype=="mutant library"),]$CSV_filename_new
dw<-paste(my_volume,"Hatanaka","FlowData","CSV",ddw,sep="/") %>%
read_csv()
dw$Name<-"WT"
dm<-paste(my_volume,"Hatanaka","FlowData","CSV",ddm,sep="/") %>%
read_csv()
dm$Name<-"Mut"
dwm<-bind_rows(dm,dw)
dwm<-dwm[dwm$FSC>-999,]
dwm$log10FSCpls3<-log10(dwm$FSC+1000)
dwm$FITCsbt<-dwm$FITC-autofl.th
dwm$log10FITCnorm<-ifelse(dwm$FITCsbt>0,log10(dwm$FITCsbt),NA)
dwm<-dwm[!is.na(dwm$log10FITCnorm),]
dwm<-dwm[(dwm$log10FSCpls3>fsc_low)&(dwm$log10FSCpls3<fsc_high)&(dwm$PE<1000),]
dwm$Name<-factor(dwm$Name,levels=qw(WT,Mut))
my_df$WT_exprs[i]<-mean(dwm[dwm$Name=="WT",]$log10FITCnorm)
my_df$MT_exprs[i]<-mean(dwm[dwm$Name=="Mut",]$log10FITCnorm)
my_df$WT_sd[i]<-sd(dwm[dwm$Name=="WT",]$log10FITCnorm)
my_df$MT_sd[i]<-sd(dwm[dwm$Name=="Mut",]$log10FITCnorm)
my_df$logFC[i]<-my_df$MT_exprs[i]-my_df$WT_exprs[i]
my_df$WT_NbCells[i]<-nrow(dwm[dwm$Name=="WT",])
my_df$MT_NbCells[i]<-nrow(dwm[dwm$Name=="Mut",])
g<-gghistogram(dwm,x="log10FITCnorm",y="density", size=0,bins=50,alpha=0.4,
legend="",legend.title="",
# add="mean", add.params = list(size=0.5,linetype=5),
color="Name",fill="Name",palette = c("#00AFBB","#D870AD"),
xlab="",ylab="",subtitle=mylist[i]
# xlab=expression(log[10]~"Green FI [a.u.]"),
# ylab="Relative frequency [a.u.]"
)+
# annotate("text",x=-Inf,y=Inf,label= mylist[i],hjust = -0.2,vjust = 1,size=5)+
scale_x_continuous(breaks = get_breaks(by = 1, from = 1),limits =  c(1, 5))
my_gb<-ggplot_build(g)
my_max<-max(my_gb$data[[1]]$density)
if(my_max<2){
g<-g+scale_y_continuous(breaks = get_breaks(by = 1, from = 0),limits = c(0,2))
}else{
g<-g+scale_y_continuous(breaks = get_breaks(by = 1, from = 0))
}
g<-ggpar(g,font.tickslab =c(15),font.subtitle = c(20))
figlist[[i]]<-g
}
rm(dw,dm,dwm,g)
# k<-1
# for(l in 1:8){
#   if(l<=7){
#     grid.arrange(figlist[[k+1]],figlist[[k+2]],figlist[[k+3]],figlist[[k+4]],figlist[[k+5]],figlist[[k+6]],figlist[[k+7]],figlist[[k+8]],figlist[[k+9]],figlist[[k+10]],nrow=1)
#     k<-k+10
#   }else{
#     grid.arrange(figlist[[1]],figlist[[2]],ncol=10)
#   }
# }
k<-0
for(l in 1:9){
grid.arrange(figlist[[k+1]],figlist[[k+2]],figlist[[k+3]],figlist[[k+4]],figlist[[k+5]],figlist[[k+6]],figlist[[k+7]],figlist[[k+8]],nrow=1)
k<-k+8
}
rm(figlist)
Sys.time()
